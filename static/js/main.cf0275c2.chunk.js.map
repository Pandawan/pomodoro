{"version":3,"sources":["serviceWorker.js","App.js","Config.js","Components/InputField.js","Components/ProgressCircle.js","Components/Button.js","Components/TimerControls.js","Components/Timer.js","Scenes/Pomodoro.js","Router.js","index.js"],"names":["Boolean","window","location","hostname","match","App","children","this","props","react_default","a","createElement","id","Component","Colors","primary","primaryDarker","Color","darken","string","grey","Config","name","InputField","_this$props","value","className","onBlur","onChange","type","e","target","defaultProps","styles","StyleSheet","create","Container","position","width","height","CircleOverlay","top","left","right","bottom","margin","Center","display","alignItems","justifyContent","Content","paddingTop","paddingLeft","paddingRight","paddingBottom","progressStyles","path","stroke","text","fill","trail","ProgressCircle","percentage","css","dist_default","Button","title","onClick","Controls","background","color","border","cursor","padding",":focus","outline","TimerControls","isRunning","onClickStart","onClickPause","onClickReset","Components_Button","index_es","icon","faPause","size","faPlay","faUndo","Timer","placeItems","Title","fontWeight","fontSize","marginTop","marginBottom","textAlign","CircleText","CircleInput","fontFamily","_this","Object","classCallCheck","startTime","possibleConstructorReturn","getPrototypeOf","call","startTimeAsSeconds","Moment","duration","amount","unit","asSeconds","state","currentTime","running","inputValue","getFormattedValueForTime","intervalFunction","bind","assertThisInitialized","start","stop","reset","restart","toggle","getPercentageValue","handleUpdateStartValue","handleChangeInputValue","time","utc","format","_this$state","_this$state2","newTime","setState","Error","interval","setInterval","clearInterval","_this$state3","isMinutesFormat","isValid","isDuration","concat","previousState","_this$state4","Components_ProgressCircle","Components_InputField","Components_TimerControls","Pomodoro","Components_Timer","Router","BrowserRouter","basename","process","src_App","Route","component","ReactDOM","render","src_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LAUoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mHCFSC,mLAVJ,IACCC,EAAaC,KAAKC,MAAlBF,SACR,OAAOG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAON,UAHRO,oDCGZC,EAAS,CACbC,QAAS,UACTC,oBAAeC,GAAM,WAClBC,OAAO,KACPC,SACHC,KAAM,WAGOC,EAZA,CACbC,KAAM,YCAFC,mLACK,IAAAC,EACwCjB,KAAKC,MAA5CiB,EADDD,EACCC,MAAOC,EADRF,EACQE,UAAWC,EADnBH,EACmBG,OAAQC,EAD3BJ,EAC2BI,SAClC,OACEnB,EAAAC,EAAAC,cAAA,SACEe,UAAWA,EACXG,KAAK,OACLJ,MAAOA,EACPG,SAAU,SAAAE,GAAC,OAAIF,EAASE,EAAEC,OAAON,QACjCE,OAAQ,SAAAG,GAAC,OAAIH,EAAOG,EAAEC,OAAON,iBATZZ,aAsBzBU,EAAWS,aAAe,CACxBN,UAAW,GACXD,MAAO,GACPE,OAAQ,aACRC,SAAU,cAGGL,yBCvBTU,SAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,SAAU,WACVC,MAAO,OACPC,OAAQ,QAEVC,cAAe,CACbH,SAAU,WACVE,OAAQ,OACRD,MAAO,OACPG,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,OAAQ,GAEVC,OAAQ,CACNC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,QAAS,CACPL,OAAQ,EACRM,WAAY,EACZC,YAAa,EACbC,aAAc,EACdC,cAAe,aAIbC,EAAiB,CACrBC,KAAM,CACJC,OAAQ3C,EAAOC,SAEjB2C,KAAM,CACJC,KAAM7C,EAAOC,SAEf6C,MAAO,CACLH,OAAQ3C,EAAOM,OAIbyC,mLACK,IAAArC,EACgCjB,KAAKC,MAApCsD,EADDtC,EACCsC,WAAYxD,EADbkB,EACalB,SAAUoD,EADvBlC,EACuBkC,KAC9B,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBAAiBc,UAAWqC,YAAI9B,EAAOG,YAC7C3B,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CACEoD,WAAYA,EACZJ,KAAMA,EACNzB,OAAQsB,IAEV9C,EAAAC,EAAAC,cAAA,OAAKe,UAAWqC,YAAI9B,EAAOO,cAAeP,EAAOa,SAC/CrC,EAAAC,EAAAC,cAAA,OAAKe,UAAWqC,YAAI9B,EAAOiB,UAAW5C,YAXnBO,aAwB7BgD,EAAe7B,aAAe,CAC5B1B,SAAU,KACVoD,KAAM,IAGOG,wBC7ETI,mLACK,IAAAzC,EACyCjB,KAAKC,MAA7CkB,EADDF,EACCE,UAAWpB,EADZkB,EACYlB,SAAU4D,EADtB1C,EACsB0C,MAAOC,EAD7B3C,EAC6B2C,QACpC,OACE1D,EAAAC,EAAAC,cAAA,UACEe,UAAWA,EACXG,KAAK,SACLqC,MAAOA,EACPC,QAASA,GAER7D,UAVYO,aAuBrBoD,EAAOjC,aAAe,CACpBN,UAAW,GACXwC,MAAO,GACPC,QAAS,cAGIF,QCtBThC,EAASC,IAAWC,OAAO,CAC/BiC,SAAU,CACRrB,QAAS,OACTE,eAAgB,gBAElBgB,OAAQ,CACNI,WAAY,OACZC,MAAOxD,EAAOC,QACdwD,OAAQ,OACRC,OAAQ,UACRC,QAAS,QACTC,SAAU,CACRC,QAAS,OACTL,MAAOxD,EAAOE,kBAKd4D,mLACK,IAAApD,EACyDjB,KAAKC,MAA7DqE,EADDrD,EACCqD,UAAWC,EADZtD,EACYsD,aAAcC,EAD1BvD,EAC0BuD,aAAcC,EADxCxD,EACwCwD,aAC/C,OACEvE,EAAAC,EAAAC,cAAA,OAAKe,UAAWqC,YAAI9B,EAAOmC,WACxBS,EACCpE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsE,EAAD,CACEvD,UAAWqC,YAAI9B,EAAOgC,QACtBC,MAAM,OACNC,QAASY,GAETtE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAiBC,KAAMC,IAASC,KAAK,SAIzC5E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsE,EAAD,CACEvD,UAAWqC,YAAI9B,EAAOgC,QACtBC,MAAM,QACNC,QAASW,GAETrE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAiBC,KAAMG,IAAQD,KAAK,SAK1C5E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsE,EAAD,CACEvD,UAAWqC,YAAI9B,EAAOgC,QACtBC,MAAM,QACNC,QAASa,GAETvE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAiBC,KAAMI,IAAQF,KAAK,iBAjCpBxE,aAgD5B+D,EAAc5C,aAAe,CAC3B8C,aAAc,aACdC,aAAc,aACdC,aAAc,cAGDJ,QCvET3C,EAASC,IAAWC,OAAO,CAC/BqD,MAAO,CACLzC,QAAS,OACT0C,WAAY,SACZlD,OAAQ,SAEVW,QAAS,CACPH,QAAS,QAEX2C,MAAO,CACLC,WAAY,MACZC,SAAU,MACVC,UAAW,EACXC,aAAc,QACdxB,MAAOxD,EAAOC,QACdgF,UAAW,UAEbC,WAAY,CACVJ,SAAU,MACVtB,MAAOxD,EAAOC,QACd8B,OAAQ,GAEVoD,YAAa,CACXN,WAAY,UACZO,WAAY,UACZ7B,WAAY,OACZ0B,UAAW,SACXzD,MAAO,OACPmC,QAAS,EACT5B,OAAQ,EACR0B,OAAQ,EACRG,SAAU,CACRJ,MAAOxD,EAAOE,kBAKdwE,cAgBJ,SAAAA,EAAYhF,GAAO,IAAA2F,EAAAC,OAAAC,EAAA,EAAAD,CAAA7F,KAAAiF,GAAA,IAITc,GAHRH,EAAAC,OAAAG,EAAA,EAAAH,CAAA7F,KAAA6F,OAAAI,EAAA,EAAAJ,CAAAZ,GAAAiB,KAAAlG,KAAMC,KAGqBA,MAAnB8F,UACFI,EAAqBC,IAAOC,SAChCN,EAAUO,OACVP,EAAUQ,MACVC,YARe,OAWjBZ,EAAKa,MAAQ,CACXV,UAAWI,EACXO,YAAaP,EACbQ,SAAS,EACTC,WAAY3B,EAAM4B,yBAAyBV,IAG7CP,EAAKkB,iBAAmBlB,EAAKkB,iBAAiBC,KAAtBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACxBA,EAAKqB,MAAQrB,EAAKqB,MAAMF,KAAXlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACbA,EAAKsB,KAAOtB,EAAKsB,KAAKH,KAAVlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACZA,EAAKuB,MAAQvB,EAAKuB,MAAMJ,KAAXlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACbA,EAAKwB,QAAUxB,EAAKwB,QAAQL,KAAblB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACfA,EAAKyB,OAASzB,EAAKyB,OAAON,KAAZlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACdA,EAAK0B,mBAAqB1B,EAAK0B,mBAAmBP,KAAxBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAC1BA,EAAK2B,uBAAyB3B,EAAK2B,uBAAuBR,KAA5BlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAC9BA,EAAK4B,uBAAyB5B,EAAK4B,uBAAuBT,KAA5BlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KA1BbA,6FAZac,GAE9B,IAAMe,EAAOrB,IAAOsB,IAAkB,IAAdhB,GAExB,OAAIA,GAAe,KAEVe,EAAKE,OAAO,WAGdF,EAAKE,OAAO,sEAmCA,IAAAC,EACgB5H,KAAKyG,MAExC,OAHmBmB,EACXlB,YADWkB,EACE7B,UAC+B,KAAO,6CAQ1C,IAAA8B,EAC2B7H,KAAKyG,MAAzCE,EADSkB,EACTlB,QAASD,EADAmB,EACAnB,YAAaX,EADb8B,EACa9B,UAG9B,GAAIY,GAAWD,EAAc,EAAG,CAC9B,IAAMoB,EAAUpB,EAAc,EAG9B1G,KAAK+H,SAAS,CACZrB,YAAaoB,EACblB,WAAY3B,EAAM4B,yBAAyBiB,KAIzCA,GAAW/B,GACb/F,KAAKkH,YAGPlH,KAAKkH,uCAUP,GAFoBlH,KAAKyG,MAAjBE,QAWN,MAAM,IAAIqB,MAAM,wDAPhBhI,KAAKiI,SAAWC,YAAYlI,KAAK8G,iBAAkB,KAGnD9G,KAAK+H,SAAS,CACZpB,SAAS,mCAab,IAFoB3G,KAAKyG,MAAjBE,QAWN,MAAM,IAAIqB,MAAM,oDAPhBG,cAAcnI,KAAKiI,UAGnBjI,KAAK+H,SAAS,CACZpB,SAAS,oCAUP,IAAAyB,EACyBpI,KAAKyG,MAA5BE,EADFyB,EACEzB,QAASZ,EADXqC,EACWrC,UAEbY,GACF3G,KAAKkH,OAGPlH,KAAK+H,SAAS,CACZrB,YAAaX,EACba,WAAY3B,EAAM4B,yBAAyBd,uCAS7C/F,KAAKmH,QAELnH,KAAKiH,yCAOejH,KAAKyG,MAAjBE,QAEN3G,KAAKkH,OAELlH,KAAKiH,uDASc/F,GAEDlB,KAAKyG,MAAjBE,SAEN3G,KAAKkH,OAIP,IAAMmB,EAAkBjC,IAAOlF,EAAO,QAAQ,GAAMoH,UAEpD,GAAKD,GAAoBjC,IAAOmC,WAAWnC,IAAOC,SAASnF,IAA3D,CASA,IAAM4G,EAAUO,EACZjC,IAAOC,SAAP,MAAAmC,OAAsBtH,IAASsF,YAC/BJ,IAAOC,SAASnF,GAAOsF,YAG3BxG,KAAK+H,SAAS,CACZrB,YAAaoB,EACb/B,UAAW+B,EACXlB,WAAY3B,EAAM4B,yBAAyBiB,UAhB3C9H,KAAK+H,SAAS,SAAAU,GAAa,MAAK,CAC9B/B,YAAa+B,EAAc/B,YAC3BX,UAAW0C,EAAc1C,UACzBa,WAAY3B,EAAM4B,yBAAyB4B,EAAc/B,+DAsBxCxF,GACrBlB,KAAK+H,SAAS,CACZnB,WAAY1F,qCAIP,IAAAwH,EACsC1I,KAAKyG,MAA1CE,EADD+B,EACC/B,QAASC,EADV8B,EACU9B,WAAYF,EADtBgC,EACsBhC,YAE7B,OACExG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQc,UAAWqC,YAAI9B,EAAOuD,QACpC/E,EAAAC,EAAAC,cAAA,OAAKe,UAAWqC,YAAI9B,EAAOiB,UACzBzC,EAAAC,EAAAC,cAAA,MAAIe,UAAWqC,YAAI9B,EAAOyD,QAASrE,EAAOC,MAC1Cb,EAAAC,EAAAC,cAACuI,EAAD,CAAgBpF,WAAYvD,KAAKsH,sBAC9BX,EACCzG,EAAAC,EAAAC,cAAA,KAAGe,UAAWqC,YAAI9B,EAAO+D,aACtBR,EAAM4B,yBAAyBH,IAGlCxG,EAAAC,EAAAC,cAACwI,EAAD,CACEzH,UAAWqC,YAAI9B,EAAO+D,WAAY/D,EAAOgE,aACzCxE,MAAO0F,EACPxF,OAAQpB,KAAKuH,uBACblG,SAAUrB,KAAKwH,0BAIrBtH,EAAAC,EAAAC,cAACyI,EAAD,CACEvE,UAAWqC,EACXpC,aAAcvE,KAAKiH,MACnBzC,aAAcxE,KAAKkH,KACnBzC,aAAczE,KAAKmH,iBApOX7G,aAmPpB2E,EAAMxD,aAAe,CACnBsE,UAAW,CACTO,OAAQ,GACRC,KAAM,YAIKtB,QC5RA6D,mLARX,OACE5I,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACNH,EAAAC,EAAAC,cAAC2I,EAAD,cAJezI,aCcR0I,mLAVX,OACE9I,EAAAC,EAAAC,cAAC6I,EAAA,EAAD,CAAeC,SAAUC,aACvBjJ,EAAAC,EAAAC,cAACgJ,EAAD,KACElJ,EAAAC,EAAAC,cAACiJ,EAAA,EAAD,CAAOpG,KAAK,IAAIqG,UAAWR,aALhBxI,mBCErBiJ,IAASC,OAAOtJ,EAAAC,EAAAC,cAACqJ,EAAD,MAAYC,SAASC,eAAe,SViH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf0275c2.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass App extends Component {\n  render() {\n    const { children } = this.props;\n    return <div id=\"App\">{children}</div>;\n  }\n}\n\nApp.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default App;\n","import Color from 'color';\n\nconst Config = {\n  name: 'Pomodoro',\n};\n\nconst Colors = {\n  primary: '#FF4136',\n  primaryDarker: Color('#FF4136')\n    .darken(0.25)\n    .string(),\n  grey: '#f1f1f1',\n};\n\nexport default Config;\nexport { Colors };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputField extends Component {\n  render() {\n    const { value, className, onBlur, onChange } = this.props;\n    return (\n      <input\n        className={className}\n        type=\"text\"\n        value={value}\n        onChange={e => onChange(e.target.value)}\n        onBlur={e => onBlur(e.target.value)}\n      />\n    );\n  }\n}\n\nInputField.propTypes = {\n  className: PropTypes.string,\n  value: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n};\n\nInputField.defaultProps = {\n  className: '',\n  value: '',\n  onBlur: () => {},\n  onChange: () => {},\n};\n\nexport default InputField;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { css, StyleSheet } from 'aphrodite';\n\nimport CircularProgressbar from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\nimport { Colors } from 'Config';\n\nconst styles = StyleSheet.create({\n  Container: {\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n  },\n  CircleOverlay: {\n    position: 'absolute',\n    height: '100%',\n    width: '100%',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: 0,\n  },\n  Center: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  Content: {\n    margin: 0,\n    paddingTop: 0,\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingBottom: '0.75em',\n  },\n});\n\nconst progressStyles = {\n  path: {\n    stroke: Colors.primary,\n  },\n  text: {\n    fill: Colors.primary,\n  },\n  trail: {\n    stroke: Colors.grey,\n  },\n};\n\nclass ProgressCircle extends Component {\n  render() {\n    const { percentage, children, text } = this.props;\n    return (\n      <div id=\"ProgressCircle\" className={css(styles.Container)}>\n        <CircularProgressbar\n          percentage={percentage}\n          text={text}\n          styles={progressStyles}\n        />\n        <div className={css(styles.CircleOverlay, styles.Center)}>\n          <div className={css(styles.Content)}>{children}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nProgressCircle.propTypes = {\n  percentage: PropTypes.number.isRequired,\n  children: PropTypes.node,\n  text: PropTypes.string,\n};\n\nProgressCircle.defaultProps = {\n  children: null,\n  text: '',\n};\n\nexport default ProgressCircle;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n  render() {\n    const { className, children, title, onClick } = this.props;\n    return (\n      <button\n        className={className}\n        type=\"button\"\n        title={title}\n        onClick={onClick}\n      >\n        {children}\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  title: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  className: '',\n  title: '',\n  onClick: () => {},\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { css, StyleSheet } from 'aphrodite';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause, faUndo } from '@fortawesome/free-solid-svg-icons';\n\nimport { Colors } from 'Config';\n\nimport Button from 'Components/Button';\n\nconst styles = StyleSheet.create({\n  Controls: {\n    display: 'flex',\n    justifyContent: 'space-around',\n  },\n  Button: {\n    background: 'none',\n    color: Colors.primary,\n    border: 'none',\n    cursor: 'pointer',\n    padding: '0.5em',\n    ':focus': {\n      outline: 'none',\n      color: Colors.primaryDarker,\n    },\n  },\n});\n\nclass TimerControls extends Component {\n  render() {\n    const { isRunning, onClickStart, onClickPause, onClickReset } = this.props;\n    return (\n      <div className={css(styles.Controls)}>\n        {isRunning ? (\n          <div>\n            <Button\n              className={css(styles.Button)}\n              title=\"Stop\"\n              onClick={onClickPause}\n            >\n              <FontAwesomeIcon icon={faPause} size=\"4x\" />\n            </Button>\n          </div>\n        ) : (\n          <div>\n            <Button\n              className={css(styles.Button)}\n              title=\"Start\"\n              onClick={onClickStart}\n            >\n              <FontAwesomeIcon icon={faPlay} size=\"4x\" />\n            </Button>\n          </div>\n        )}\n\n        <div>\n          <Button\n            className={css(styles.Button)}\n            title=\"Reset\"\n            onClick={onClickReset}\n          >\n            <FontAwesomeIcon icon={faUndo} size=\"4x\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nTimerControls.propTypes = {\n  isRunning: PropTypes.bool.isRequired,\n  onClickStart: PropTypes.func,\n  onClickPause: PropTypes.func,\n  onClickReset: PropTypes.func,\n};\n\nTimerControls.defaultProps = {\n  onClickStart: () => {},\n  onClickPause: () => {},\n  onClickReset: () => {},\n};\n\nexport default TimerControls;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { css, StyleSheet } from 'aphrodite';\nimport Moment from 'moment';\n\nimport Config, { Colors } from 'Config';\n\nimport InputField from 'Components/InputField';\nimport ProgressCircle from 'Components/ProgressCircle';\nimport TimerControls from 'Components/TimerControls';\n\nconst styles = StyleSheet.create({\n  Timer: {\n    display: 'grid',\n    placeItems: 'center',\n    height: '100vh',\n  },\n  Content: {\n    display: 'grid',\n  },\n  Title: {\n    fontWeight: '500',\n    fontSize: '3em',\n    marginTop: 0,\n    marginBottom: '0.1em',\n    color: Colors.primary,\n    textAlign: 'center',\n  },\n  CircleText: {\n    fontSize: '4em',\n    color: Colors.primary,\n    margin: 0,\n  },\n  CircleInput: {\n    fontWeight: 'inherit',\n    fontFamily: 'inherit',\n    background: 'none',\n    textAlign: 'center',\n    width: '100%',\n    padding: 0,\n    margin: 0,\n    border: 0,\n    ':focus': {\n      color: Colors.primaryDarker,\n    },\n  },\n});\n\nclass Timer extends Component {\n  /**\n   * Formats the given time (in milliseconds) to a H:mm:ss or m:ss time format\n   */\n  static getFormattedValueForTime(currentTime) {\n    // Convert seconds to milliseconds as Moment Object\n    const time = Moment.utc(currentTime * 1000);\n    // If it's longer than 1 hour\n    if (currentTime >= 60 * 60) {\n      // Format to HH:mm:ss\n      return time.format('H:mm:ss');\n    }\n    // Format to mm:ss\n    return time.format('m:ss');\n  }\n\n  constructor(props) {\n    super(props);\n\n    // Convert the startTime into seconds\n    const { startTime } = this.props;\n    const startTimeAsSeconds = Moment.duration(\n      startTime.amount,\n      startTime.unit\n    ).asSeconds();\n\n    // Assign state startTime, currentTime, and running values\n    this.state = {\n      startTime: startTimeAsSeconds,\n      currentTime: startTimeAsSeconds,\n      running: false,\n      inputValue: Timer.getFormattedValueForTime(startTimeAsSeconds),\n    };\n\n    this.intervalFunction = this.intervalFunction.bind(this);\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.reset = this.reset.bind(this);\n    this.restart = this.restart.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.getPercentageValue = this.getPercentageValue.bind(this);\n    this.handleUpdateStartValue = this.handleUpdateStartValue.bind(this);\n    this.handleChangeInputValue = this.handleChangeInputValue.bind(this);\n  }\n\n  /**\n   * Get a percentage value of the timer.\n   */\n  getPercentageValue() {\n    const { currentTime, startTime } = this.state;\n    const exactPercentage = (currentTime / startTime) * 100 || 0;\n    return exactPercentage;\n  }\n\n  /**\n   * Called every second by the interval.\n   * Used to update the time.\n   */\n  intervalFunction() {\n    const { running, currentTime, startTime } = this.state;\n\n    // Make sure that the timer is running AND that it hasn't already passed 0\n    if (running && currentTime > 0) {\n      const newTime = currentTime - 1;\n\n      // Add 1 to the current time\n      this.setState({\n        currentTime: newTime,\n        inputValue: Timer.getFormattedValueForTime(newTime),\n      });\n\n      // If it has reached maxTime, stop it\n      if (newTime >= startTime) {\n        this.stop();\n      }\n    } else {\n      this.stop();\n    }\n  }\n\n  /**\n   * Start the timer from the startTime\n   */\n  start() {\n    const { running } = this.state;\n    // Make sure it's not currently running\n    if (!running) {\n      // Start an interval every second\n      this.interval = setInterval(this.intervalFunction, 1000);\n\n      // Update the state\n      this.setState({\n        running: true,\n      });\n    } else {\n      throw new Error('Tried starting the timer but it was already running.');\n    }\n  }\n\n  /**\n   * Stop the timer but keep the current time\n   */\n  stop() {\n    const { running } = this.state;\n    // Make sure it's currently running\n    if (running) {\n      // Stop & clear the interval\n      clearInterval(this.interval);\n\n      // Update the state\n      this.setState({\n        running: false,\n      });\n    } else {\n      throw new Error('Tried stopping the timer but it was not running.');\n    }\n  }\n\n  /**\n   * Stop the timer AND reset the time\n   */\n  reset() {\n    const { running, startTime } = this.state;\n    // Stop the timer if not already\n    if (running) {\n      this.stop();\n    }\n    // Reset time to 0\n    this.setState({\n      currentTime: startTime,\n      inputValue: Timer.getFormattedValueForTime(startTime),\n    });\n  }\n\n  /**\n   * Stop the timer, clear the time, and start it again.\n   */\n  restart() {\n    // Stop and Reset\n    this.reset();\n    // Start the new timer\n    this.start();\n  }\n\n  /**\n   * Toggle the Timer state (Start/Stop)\n   */\n  toggle() {\n    const { running } = this.state;\n    if (running) {\n      this.stop();\n    } else {\n      this.start();\n    }\n  }\n\n  /**\n   * Called when the focus on the input field is lost.\n   * Confirm the value and update the start/current times.\n   * @param {string} value The InputField's value\n   */\n  handleUpdateStartValue(value) {\n    // Stop it if currently running (shouldn't happen, just in case)\n    const { running } = this.state;\n    if (running) {\n      this.stop();\n    }\n\n    // Whether or not the given input is in mm:ss format\n    const isMinutesFormat = Moment(value, 'm:ss', true).isValid();\n    // If it's not in mm:ss format AND it's not a valid duration, don't allow it!\n    if (!isMinutesFormat && !Moment.isDuration(Moment.duration(value))) {\n      this.setState(previousState => ({\n        currentTime: previousState.currentTime,\n        startTime: previousState.startTime,\n        inputValue: Timer.getFormattedValueForTime(previousState.currentTime),\n      }));\n      return;\n    }\n    // Change the time to the new one\n    const newTime = isMinutesFormat\n      ? Moment.duration(`00:${value}`).asSeconds()\n      : Moment.duration(value).asSeconds();\n\n    // Update the time\n    this.setState({\n      currentTime: newTime,\n      startTime: newTime,\n      inputValue: Timer.getFormattedValueForTime(newTime),\n    });\n  }\n\n  /**\n   * Called when the value of the input field changes.\n   * Update the state to reflect those changes.\n   * @param {string} value The InputField's Value\n   */\n  handleChangeInputValue(value) {\n    this.setState({\n      inputValue: value,\n    });\n  }\n\n  render() {\n    const { running, inputValue, currentTime } = this.state;\n\n    return (\n      <div id=\"Timer\" className={css(styles.Timer)}>\n        <div className={css(styles.Content)}>\n          <h1 className={css(styles.Title)}>{Config.name}</h1>\n          <ProgressCircle percentage={this.getPercentageValue()}>\n            {running ? (\n              <p className={css(styles.CircleText)}>\n                {Timer.getFormattedValueForTime(currentTime)}\n              </p>\n            ) : (\n              <InputField\n                className={css(styles.CircleText, styles.CircleInput)}\n                value={inputValue}\n                onBlur={this.handleUpdateStartValue}\n                onChange={this.handleChangeInputValue}\n              />\n            )}\n          </ProgressCircle>\n          <TimerControls\n            isRunning={running}\n            onClickStart={this.start}\n            onClickPause={this.stop}\n            onClickReset={this.reset}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  startTime: PropTypes.shape({\n    amount: PropTypes.number,\n    unit: PropTypes.string,\n  }),\n};\n\nTimer.defaultProps = {\n  startTime: {\n    amount: 25,\n    unit: 'minutes',\n  },\n};\n\nexport default Timer;\n","import React, { Component } from 'react';\n\nimport Timer from 'Components/Timer';\n\nclass Pomodoro extends Component {\n  render() {\n    return (\n      <div id=\"Pomodoro\">\n        <Timer />\n      </div>\n    );\n  }\n}\n\nexport default Pomodoro;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport App from 'App';\nimport Pomodoro from 'Scenes/Pomodoro';\n\nclass Router extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App>\n          <Route path=\"/\" component={Pomodoro} />\n        </App>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from 'serviceWorker';\n\nimport Router from 'Router';\n\nimport 'index.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}